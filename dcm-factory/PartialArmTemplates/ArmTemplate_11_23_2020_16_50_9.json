{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dcm-factory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/copyParquetToSql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy To Staging Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Staging Table Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@pipeline().parameters.blob_name",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "LS_parquet_lake",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "sql_domain_data_collection",
								"type": "DatasetReference",
								"parameters": {
									"domain_id": {
										"value": "@variables('domain_id')",
										"type": "Expression"
									},
									"table_name": {
										"value": "@variables('staging_table_name')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set Domain ID",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "domain_id",
							"value": {
								"value": "@split(pipeline().parameters.blob_name, '.')[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Flow ID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Domain ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "flow_id",
							"value": {
								"value": "@split(pipeline().parameters.blob_name, '.')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Cosmos Filter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Flow ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "cosmos_filter",
							"value": {
								"value": "{'flow_id': \"@{variables('flow_id')}\"}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Merge Staging Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy To Staging Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_MERGE_COLLECTION_DATA]",
							"storedProcedureParameters": {
								"sourceSchema": {
									"value": {
										"value": "@variables('domain_id')",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourceTable": {
									"value": {
										"value": "@variables('staging_table_name')",
										"type": "Expression"
									},
									"type": "String"
								},
								"targetSchema": {
									"value": {
										"value": "@variables('domain_id')",
										"type": "Expression"
									},
									"type": "String"
								},
								"targetTable": {
									"value": "collection_data",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "linkedService1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Staging Table Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Cosmos Filter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "staging_table_name",
							"value": {
								"value": "staging_@{variables('flow_id')}",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"blob_name": {
						"type": "string",
						"defaultValue": "NOT SET"
					}
				},
				"variables": {
					"domain_id": {
						"type": "String"
					},
					"flow_id": {
						"type": "String"
					},
					"cosmos_filter": {
						"type": "String"
					},
					"staging_table_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-07T18:48:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LS_parquet_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_parquet_lake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DCMAzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "uploads"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}